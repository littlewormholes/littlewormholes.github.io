.clearfix{
    &:after{
        content: '';
        display: table;
        clear: both;
    }
}

$breakpoints: (
    'xsmall' : 460px,
    'small'  : 767px,
    'medium' : 992px,
    'large'  : 1200px
);

@mixin respond-to($breakpoint){
    $value: map-get($breakpoints, $breakpoint);

    @if $value != null{
        @media (max-width: $value){
            @content;
        }
    }

    @else{
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

.container-fluid{
    padding: 0 $gutter;
    
    @include respond-to('medium'){
        padding: 0 $gutter / 2;
    }
    
    @include respond-to('small'){
        padding: 0 15px;
    }
}

@mixin transition($time: null, $effect: null){
    -webkit-transition: all .2s ease-in-out;
    -moz-transition: all .2s ease-in-out;
    -o-transition: all .2s ease-in-out;
    transition: all .2s ease-in-out;
}

//Vertical align mixin
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

//Horizontal align mixin
@mixin horizontal-align($position: relative) {
    position: $position;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

/* support classes */
.fleft{
    float: left;
}

.fright{
    float: right;
}

.clear{
    clear: both;
}

.width-100{
    width: 100%;
}

.width-50{
    width: 50%;
}
